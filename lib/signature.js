// Generated by CoffeeScript 2.0.2
var Signature;

import {
  URL
} from 'url';

import path from 'path';

import crypto from 'crypto';

import {
  sprintf
} from 'sprintf-js';

export default Signature = class Signature {
  static getScriptNameFromUrl(url) {
    var len, pathname, urlObj;
    try {
      urlObj = new URL(url);
    } catch (error) {
      return path.basename(url);
    }
    pathname = urlObj.pathname;
    len = pathname.length;
    if (len === 0 || '/' === pathname[-1]) {
      return '';
    }
    return path.basename(pathname);
  }

  static make(scriptName, params, secretKey) {
    var flatParams;
    flatParams = this.makeFlatParamsArray(params);
    // console.log '@make', flatParams
    return crypto.createHash('md5').update(this.makeSigStr(scriptName, flatParams, secretKey)).digest('hex');
  }

  static check(signature, scriptName, params, secretKey) {
    return signature === this.make(scriptName, params, secretKey);
  }

  static makeSigStr(scriptName, params, secretKey) {
    var flatParams, keys;
    params = _.omit(params, 'pg_sig');
    flatParams = [scriptName];
    keys = _.sortBy(_.keys(params), function(key) {
      return key;
    });
    _.map(keys, function(key) {
      return flatParams.push(params[key]);
    });
    flatParams.push(secretKey);
    return flatParams.join(';');
  }

  static makeFlatParamsArray(params, parentName) {
    var flatParams, i, key, name, val;
    if (!parentName) {
      parentName = '';
    }
    flatParams = {};
    i = 0;
    for (key in params) {
      val = params[key];
      i++;
      if (key === 'pg_sig') {
        continue;
      }
      // /**
      //  * Имя делаем вида tag001subtag001
      //  * Чтобы можно было потом нормально отсортировать и вложенные узлы не запутались при сортировке
      //  */
      name = parentName + key + sprintf('%03d', i);
      if (_.isObject(val)) {
        _.extend(flatParams, this.makeFlatParamsArray(val, name));
        continue;
      }
      flatParams[name] = val;
    }
    return flatParams;
  }

};
