// Generated by CoffeeScript 2.0.2
var Paybox, Rest, responseXml;

import {
  Meteor
} from 'meteor/meteor';

import {
  Random
} from 'meteor/random';

import {
  check,
  Match
} from 'meteor/check';

import {
  HTTP
} from 'meteor/http';

import {
  sprintf
} from 'sprintf-js';

import convert from 'xml-js';

import {
  Js2Xml
} from 'js2xml';

import PGSignature from './signature';

import config from './config';

export default Paybox = (function() {
  class Paybox {
    static config(cfg) {
      if (cfg) {
        return _.extend(config, cfg);
      } else {
        return _.extend({}, config);
      }
    }

    static onResult(cb) {
      return this._onResult = cb;
    }

    static onCheck(cb) {
      return this._onCheck = cb;
    }

    static onFailure(cb) {
      return this._onFailure = cb;
    }

    static call(script, params, cb) {
      var e, result;
      if (config.testingMode) {
        params.pg_testing_mode = 1;
      }
      params.pg_merchant_id = config.merchantId;
      params.pg_salt = Random.id();
      params.pg_sig = PGSignature.make(script, params, config.secretKey);
      try {
        result = HTTP.post(`https://paybox.kz/${script}`, {
          data: params
        });
        result = convert.xml2js(result.content, {
          compact: true
        });
        if (cb) {
          return cb(null, result.response);
        }
      } catch (error) {
        e = error;
        if (cb) {
          return cb(e, null);
        }
      }
    }

    static initPayment(params, cb) {
      _.extend(params, {
        pg_site_url: config.siteUrl,
        pg_language: config.language,
        pg_currency: config.currency
      });
      if (this._onResult) {
        params.pg_result_url = `${config.siteUrl}/api/paybox?action=result&secret=${config.secretKey}`;
      }
      if (this._onCheck) {
        params.pg_check_url = `${config.siteUrl}/api/paybox?action=check&secret=${config.secretKey}`;
      }
      if (this._onFailure) {
        params.pg_failure_url = `${config.siteUrl}/api/paybox?action=failure&secret=${config.secretKey}`;
      }
      if (config.successUrl) {
        params.pg_success_url = config.successUrl;
      }
      return this.call('init_payment.php', params, cb);
    }

    static paymentSystemList(params, cb) {
      return this.call('ps_list.php', params, cb);
    }

  };

  /*
  Синхронная версия метода initPayment
  */
  Paybox.initPaymentSync = Meteor.wrapAsync(Paybox.initPayment, Paybox);

  return Paybox;

})();

// Маршруты для обработки REST запросов от Paybox
Rest = new Restivus({
  useDefaultAuth: true,
  prettyJson: true
});

responseXml = function(params, context) {
  params.pg_sig = PGSignature.make(config.callbackScriptName, params, config.secretKey);
  if (context) {
    context.writeHead(200, {
      'Content-Type': 'application/xml'
    });
    context.write(new Js2Xml('request', params).toString());
    context.done();
    return void 0;
  } else {
    return {
      headers: {
        'Content-Type': 'application/xml'
      },
      body: new Js2Xml('request', params).toString()
    };
  }
};

// http://localhost:3200/api/paybox?action=result&amount=50&order_id=vYyioup4zJG9Tk5vd
Meteor.startup(function() {
  return Rest.addRoute(config.callbackScriptName, {
    authRequired: false
  }, {
    [`${config.callbackMethod}`]: function() {
      var params, ref, ref1, response;
      if (config.debug) {
        console.log('Paybox.restRoute', this.queryParams, this.bodyParams);
      }
      if (((ref = this.queryParams) != null ? ref.pg_payment_id : void 0) != null) {
        params = _.omit(this.queryParams, ['__proto__']);
      } else if (((ref1 = this.bodyParams) != null ? ref1.pg_payment_id : void 0) != null) {
        params = _.omit(this.bodyParams, ['__proto__']);
      } else {
        params = {};
      }
      if (params.secret !== config.secretKey) {
        return {
          statusCode: 403,
          body: 'Access restricted 403'
        };
      }
      switch (params.action) {
        case 'check':
          response = typeof Paybox._onCheck === "function" ? Paybox._onCheck(params) : void 0;
          break;
        case 'result':
          response = typeof Paybox._onResult === "function" ? Paybox._onResult(params) : void 0;
          break;
        case 'failure':
          response = typeof Paybox._onFailure === "function" ? Paybox._onFailure(params) : void 0;
          break;
        default:
          response = {
            pg_status: 'error',
            pg_description: "Unknown action"
          };
      }
      if (!response) {
        response = {
          pg_status: 'error',
          pg_description: 'Unknown error'
        };
      }
      response.pg_salt = params.pg_salt;
      if (config.debug) {
        console.log('Paybox.restRoute.response', response);
      }
      return responseXml(response);
    }
  });
});
